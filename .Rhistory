knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(tidyverse)
library(RSQLite)
library(readr)
library(tidyverse)
library(RSQLite)
test_connection <- RSQLite::dbConnect(RSQLite::SQLite(),"test.db")
dbListTables(test_connection)
dbListTables(test_connection)
dbListTables(test_connection)
dbListTables(test_connection)
dbListTables(test_connection)
dbListTables(test_connection)
dbListTables(test_connection)
test_connection <- RSQLite::dbConnect(RSQLite::SQLite(),"test.db")
RSQLite::dbDisconnect(test_connection)
test_connection <- RSQLite::dbConnect(RSQLite::SQLite(),"test.db")
dbListTables(test_connection)
#Obtain the top 5 product categories with the highest average review score in 2017.
library(dplyr)
top_categories_avg_review_score <- order_reviews %>% inner_join(orders, by ="order_id")%>% inner_join(order_items, by ="order_id")%>% inner_join(products, by ="product_id")%>% inner_join(product_category_name_translation, by ="product_category_name")%>% mutate(year = lubridate::year(order_purchase_timestamp))%>% filter(year ==2017)%>% group_by(product_category_name)%>% summarize(avg_review_score = mean(review_score))%>% arrange(desc(avg_review_score))%>% head(5)
top_categories_avg_review_score <- order_reviews %>% inner_join(orders, by = "order_id") %>% inner_join(order_items, by = "order_id") %>% inner_join(products, by = "product_id") %>% inner_join(product_category_name_translation, by = c("product_category_name"="product_category_name_english")) %>% mutate(year = lubridate::year(order_purchase_timestamp)) %>% filter(year == 2017) %>% group_by(product_category_name) %>% summarize(avg_review_score = mean(review_score)) %>% arrange(desc(avg_review_score)) %>% head(5)
dbListTables(test_connection)
closed_deals<-read.csv("C:\Users\mailm\Desktop\Assignment DM\R_Project\Dataset\olist_closed_deals_dataset.csv")
closed_deals<-read.csv("C:\Users\mailm\Desktop\Assignment DM\R_Project\Dataset\olist_closed_deals_dataset.csv")
closed_deals<-read.csv("C:\\Users\\mailm\\Desktop\\Assignment DM\\R_Project\\Dataset\\olist_closed_deals_dataset.csv")
customers<- read.csv("C:\Users\mailm\Desktop\Assignment DM\R_Project\Dataset\olist_customers_dataset.csv")
closed_deals<-read.csv("C:\\Users\\mailm\\Desktop\\Assignment DM\\R_Project\\Dataset\\olist_closed_deals_dataset.csv")
customers<- read.csv(r"C:\Users\mailm\Desktop\Assignment DM\R_Project\Dataset\olist_customers_dataset.csv")
closed_deals<-read.csv("C:\\Users\\mailm\\Desktop\\Assignment DM\\R_Project\\Dataset\\olist_closed_deals_dataset.csv")
customers<- read.csv("C:\\Users\\mailm\\Desktop\\Assignment DM\\R_Project\\Dataset\\olist_customers_dataset.csv")
geolocation<-read.csv("C:\\Users\\mailm\\Desktop\\Assignment DM\\R_Project\\Dataset\\olist_geolocation_dataset.csv")
marketing_qualified_leads<-read.csv("C:\\Users\\mailm\\Desktop\\Assignment DM\\R_Project\\Dataset\\olist_marketing_qualified_leads_dataset.csv")
order_items<- read.csv("C:\\Users\\mailm\\Desktop\\Assignment DM\\R_Project\\Dataset\\olist_order_items_dataset.csv")
order_payments <- read.csv("C:\\Users\\mailm\\Desktop\\Assignment DM\\R_Project\\Dataset\\olist_order_payments_dataset.csv")
order_reviews<-read.csv("C:\\Users\\mailm\\Desktop\\Assignment DM\\R_Project\\Dataset\\olist_order_reviews_dataset.csv")
orders<- read.csv("C:\\Users\\mailm\\Desktop\\Assignment DM\\R_Project\\Dataset\\olist_orders_dataset.csv")
products<-read.csv("C:\\Users\\mailm\\Desktop\\Assignment DM\\R_Project\\Dataset\\olist_products_dataset.csv")
sellers<-read.csv("C:\\Users\\mailm\\Desktop\\Assignment DM\\R_Project\\Dataset\\olist_sellers_dataset.csv")
product_category_name_translation<-read.csv("C:\\Users\\mailm\\Desktop\\Assignment DM\\R_Project\\Dataset\\product_category_name_translation.csv")
top_categories_avg_review_score <- order_reviews %>% inner_join(orders, by = "order_id") %>% inner_join(order_items, by = "order_id") %>% inner_join(products, by = "product_id") %>% inner_join(product_category_name_translation, by = c("product_category_name"="product_category_name_english")) %>% mutate(year = lubridate::year(order_purchase_timestamp)) %>% filter(year == 2017) %>% group_by(product_category_name) %>% summarize(avg_review_score = mean(review_score)) %>% arrange(desc(avg_review_score)) %>% head(5)
top_categories_avg_review_score
top_categories_avg_review_score
#Query 2: What is the total number of orders and total revenue for each product categoryin 2018 and filter out the top 3?
top_categories_by_revenue <- orders %>% mutate(year = lubridate::year(order_purchase_timestamp))%>%filter(year == 2018) %>% inner_join(order_payments, by = "order_id") %>% inner_join(order_items, by = "order_id") %>% inner_join(products, by = "product_id") %>% inner_join(product_category_name_translation, by = c("product_category_name"="product_category_name_english")) %>% group_by(product_category_name) %>% summarize(num_orders = n_distinct(order_id), total_revenue = sum(payment_value)) %>% head(3)
top_categories_by_revenue
#Query 2: What is the total number of orders and total revenue for each product categoryin 2018 and filter out the top 3?
top_categories_by_revenue <- orders %>% mutate(year = lubridate::year(order_purchase_timestamp))%>%filter(year == 2018) %>% inner_join(order_payments, by = "order_id") %>% inner_join(order_items, by = "order_id") %>% inner_join(products, by = "product_id") %>% inner_join(product_category_name_translation, by = c("product_category_name"="product_category_name_english")) %>% group_by(product_category_name) %>% summarize(num_orders = n_distinct(order_id), total_revenue = sum(payment_value)) %>% head(10)
top_categories_by_revenue
#Query 2: What is the total number of orders and total revenue for each product categoryin 2018 and filter out the top 3?
top_categories_by_revenue <- orders %>% mutate(year = lubridate::year(order_purchase_timestamp))%>%filter(year == 2018) %>% inner_join(order_payments, by = "order_id") %>% inner_join(order_items, by = "order_id") %>% inner_join(products, by = "product_id") %>% inner_join(product_category_name_translation, by = c("product_category_name"="product_category_name_english")) %>% group_by(product_category_name) %>% summarize(num_orders = n_distinct(order_id), total_revenue = sum(payment_value)) %>% arrange(desc(total_revenue)) %>% head(10)
top_categories_by_revenue
#Query 3: How many buyers purchased multiple products from the same seller?
num_customers <- orders %>% inner_join(order_items, by = "order_id") %>% group_by(seller_id) %>% summarise(num_customers = n_distinct(paste(customer_id, seller_id))) %>% filter(num_customers > 0)
num_customers
#Query 4: What is the average order value in each Brazilian state?
avg_order_value <- orders %>% inner_join(order_payments, by = "order_id") %>% inner_join(customers, by="customer_id")%>% group_by(customer_state) %>% summarise(avg_order_value = mean(payment_value))
avg_order_value
num_cancelled_orders
#Query 5:  How many orders for each payment method were cancelled?
num_cancelled_orders <- orders %>% filter(order_status == "canceled") %>% inner_join(order_payments, by="order_id") %>% group_by(payment_type) %>% summarise(num_cancelled_orders = n())
num_cancelled_orders
#Query 1: What are the top 5 product categories with the highest average review score in 2017?
top_categories_avg_review_score <- order_reviews %>% inner_join(orders, by = "order_id") %>% inner_join(order_items, by = "order_id") %>% inner_join(products, by = "product_id") %>% inner_join(product_category_name_translation, by = c("product_category_name"="product_category_name_english")) %>% mutate(year = lubridate::year(order_purchase_timestamp)) %>% filter(year == 2017) %>% group_by(product_category_name) %>% summarize(avg_review_score = mean(review_score)) %>% arrange(desc(avg_review_score))
top_categories_avg_review_score
library(ggplot2)
ggplot(top_categories_avg_review_score)
ggplot(data=top_categories_avg_review_score, aes(x=product_category_name, y=avg_review_score))
ggplot(data=top_categories_avg_review_score, aes(x=product_category_name, y=avg_review_score)) + geom_point()
ggplot(data=top_categories_avg_review_score, aes(x=product_category_name, y=avg_review_score)) + geom_histogram()
ggplot(data=top_categories_avg_review_score, aes(x=product_category_name, y=avg_review_score)) + geom_bar()
ggplot(data=top_categories_avg_review_score, aes(x=product_category_name)) + geom_bar()
ggplot(data=top_categories_avg_review_score, aes(x=product_category_name, y=avg_review_score)) + geom_bar()
ggplot(data=top_categories_avg_review_score, aes(x=product_category_name, y=avg_review_score)) + geom_density()
ggplot(data=top_categories_avg_review_score, aes(x=product_category_name, y=avg_review_score)) + geom_vline()
ggplot(data=top_categories_avg_review_score, aes(x=product_category_name, y=avg_review_score))
ggplot(data=top_categories_avg_review_score, aes(x=product_category_name, y=avg_review_score)) + geom_curve()
ggplot(data=top_categories_avg_review_score, aes(x=product_category_name, y=avg_review_score)) + geom_point()
ggplot(data=top_categories_avg_review_score, aes(x=product_category_name, y=avg_review_score)) + geom_line()
ggplot(data=top_categories_avg_review_score, aes(x=product_category_name, y=avg_review_score)) + geom_line()
ggplot(data=top_categories_avg_review_score, aes(x=product_category_name, y=avg_review_score)) + geom_point()
num_cancelled_orders1
num_cancelled_orders1 <- orders  %>% left_join(order_payments, by="order_id") %>%left_join(order_items, by="order_id") %>% left_join(products, by="product_id")%>% inner_join(product_category_name_translation, by="product_category_name")%>% filter(order_status == "canceled")%>%group_by(product_category_name_english) %>% summarise(num_cancelled_orders = n())%>%arrange(desc(num_cancelled_orders))
num_cancelled_orders1
num_customers_from_sellers1<- orders %>% inner_join(order_items, by = "order_id") %>% inner_join(customers, by="customer_id") %>% group_by(seller_id) %>% summarise(num_customers = n_distinct(paste(customer_id, seller_id)), mode_customer_location = names(which.max(table(customer_state)))) %>% filter(num_customers > 0)
num_customers_from_sellers1
#Q2
ggplot(top_categories_by_revenue, aes(x = product_category_name, y = total_revenue)) +
geom_bar(stat = "identity", fill = "blue") +
coord_flip() +
xlab("Product Category") +
ylab("Total Revenue (BRL)") +
ggtitle("Top 10 Product Categories by Revenue in 2018")
ggplot(top_categories_by_revenue, aes(x = product_category_name, y = total_revenue)) +
geom_bar(stat = "identity", fill = "red") +
coord_flip() +
xlab("Product Category") +
ylab("Total Revenue (BRL)") +
ggtitle("Top 10 Product Categories by Revenue in 2018")
ggplot(num_customers_from_sellers1, aes(x = reorder(seller_id, num_customers), y = num_customers)) +
geom_bar(stat = "identity", fill = "blue") +
xlab("Seller ID") +
ylab("Number of Unique Customers") +
ggtitle("Number of Unique Customers per Seller")
ggplot(num_customers_from_sellers1, aes(x = reorder(seller_id, num_customers), y = num_customers)) +
geom_bar(stat = "identity", fill = "black") +
xlab("Seller ID") +
ylab("Number of Unique Customers") +
ggtitle("Number of Unique Customers per Seller")
ggplot(num_customers_from_sellers1, aes(x = num_customers, y = reorder(seller_id, num_customers), color = mode_customer_location)) +
geom_point(size = 3) +
scale_color_brewer(palette = "Set1") +
xlab("Number of Unique Customers") +
ylab("Seller ID") +
ggtitle("Number of Unique Customers and Mode Customer Location per Seller")
geom_tile() +
scale_fill_gradient(low = "white", high = "blue") +
xlab("Mode Customer Location") +
ylab("Seller ID") +
ggtitle("Number of Unique Customers and Mode Customer Location per Seller (Heatmap)")
ggplot(num_customers_from_sellers1, aes(x = mode_customer_location, y = reorder(seller_id, num_customers), fill = num_customers)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "blue") +
xlab("Mode Customer Location") +
ylab("Seller ID") +
ggtitle("Number of Unique Customers and Mode Customer Location per Seller (Heatmap)")
ggplot(avg_order_value, aes(map_id = customer_state, fill = avg_order_value)) +
geom_map(map = map_data("state"), color = "white", size = 0.1) +
scale_fill_gradient(low = "white", high = "red", name = "Avg. Order Value") +
labs(title = "Average Order Value by State") +
theme_void() +
theme(plot.title = element_text(hjust = 0.5, size = 16))
install.packages('maps')
ggplot(num_cancelled_orders1, aes(x = num_cancelled_orders, y = reorder(product_category_name_english, num_cancelled_orders))) +
geom_col(fill = "darkred") +
geom_text(aes(label = num_cancelled_orders), hjust = -0.1, size = 4, color = "white") +
labs(title = "Number of Cancelled Orders by Product Category") +
xlab("Number of Cancelled Orders") +
ylab("Product Category") +
theme_minimal()
ggplot(num_customers_from_sellers1, aes(x = mode_customer_location, y = reorder(seller_id, num_customers), fill = num_customers)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "blue") +
xlab("Mode Customer Location") +
ylab("Seller ID") +
ggtitle("Number of Unique Customers and Mode Customer Location per Seller (Heatmap)")
ggplot(num_cancelled_orders1, aes(x = num_cancelled_orders, y = reorder(product_category_name_english, num_cancelled_orders))) +
geom_col(fill = "darkred") +
geom_text(aes(label = num_cancelled_orders), hjust = -0.1, size = 4, color = "white") +
labs(title = "Number of Cancelled Orders by Product Category") +
xlab("Number of Cancelled Orders") +
ylab("Product Category") +
theme_minimal()
install.packages('maps')
ggplot(avg_order_value, aes(map_id = customer_state, fill = avg_order_value)) +
geom_map(map = map_data("state"), color = "white", size = 0.1) +
scale_fill_gradient(low = "white", high = "red", name = "Avg. Order Value") +
labs(title = "Average Order Value by State") +
theme_void() +
theme(plot.title = element_text(hjust = 0.5, size = 16))
ggplot(num_cancelled_orders1, aes(x = num_cancelled_orders, y = reorder(product_category_name_english, num_cancelled_orders))) +
geom_col(fill = "darkred") +
geom_text(aes(label = num_cancelled_orders), hjust = -0.1, size = 4, color = "white") +
labs(title = "Number of Cancelled Orders by Product Category") +
xlab("Number of Cancelled Orders") +
ylab("Product Category") +
theme_minimal()
library(ggforce)
install.packages('ggforce')
library(ggforce)
ggplot(num_cancelled_orders1, aes(fill = product_category_name_english, y = num_cancelled_orders)) +
geom_donut(width = 0.5) +
coord_fixed() +
scale_fill_discrete(name = "Product Category") +
theme_void() +
theme(legend.position = "bottom") +
labs(title = "Proportion of Cancelled Orders by Product Category")
library(maps)
ggplot(avg_order_value, aes(map_id = customer_state, fill = avg_order_value)) +
geom_map(map = map_data("state"), color = "white", size = 0.1) +
scale_fill_gradient(low = "white", high = "red", name = "Avg. Order Value") +
labs(title = "Average Order Value by State") +
theme_void() +
theme(plot.title = element_text(hjust = 0.5, size = 16))
install.packages('ggforce')
install.packages("ggforce")
knitr::opts_chunk$set(echo = TRUE)
library(ggforce)
ggplot(num_cancelled_orders1, aes(fill = product_category_name_english, y = num_cancelled_orders)) +
geom_donut(width = 0.5) +
coord_fixed() +
scale_fill_discrete(name = "Product Category") +
theme_void() +
theme(legend.position = "bottom") +
labs(title = "Proportion of Cancelled Orders by Product Category")
ggplot(num_cancelled_orders1, aes(x = reorder(product_category_name_english, -num_cancelled_orders), y = num_cancelled_orders)) +
geom_bar(stat = "identity", fill = "blue") +
labs(title = "Number of Cancelled Orders by Product Category", x = "Product Category", y = "Number of Cancelled Orders") +
theme_bw() +
theme(axis.text.y = element_text(size = 12))
ggplot(num_customers_from_sellers1, aes(x = mode_customer_location, y = reorder(seller_id, num_customers), fill = num_customers)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "blue") +
xlab("Mode Customer Location") +
ylab("Seller ID") +
ggtitle("Number of Unique Customers and Mode Customer Location per Seller (Heatmap)")
install.packages('ggmap')
library(ggmap)
ggplot(avg_order_value, aes(map_id = customer_state, fill = avg_order_value)) +
geom_map(map = map_data("state"), color = "white", size = 0.1) +
scale_fill_gradient(low = "white", high = "red", name = "Avg. Order Value") +
labs(title = "Average Order Value by State") +
theme_void() +
theme(plot.title = element_text(hjust = 0.5, size = 16))
library(ggplot2)
library(ggmap)
# Get latitude and longitude coordinates for each state
states <- map_data("state")
state_coords <- aggregate(cbind(lon, lat) ~ region, data = states, FUN = function(x) mean(range(x)))
library(ggplot2)
library(ggmap)
# Get latitude and longitude coordinates for each state
states <- map_data("state")
state_coords <- aggregate(cbind(lon, lat) ~ region, data = states, FUN = function(x) mean(range(x)))
ggplot(avg_order_value, aes(x = avg_order_value, y = customer_state)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Average Order Value by State", x = "Average Order Value", y = "State") +
theme_minimal() +
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 14, face = "bold"))
library(ggplot2)
library(maps)
map_data("state")
ggplot(avg_order_value, aes(map_id = customer_state, fill = avg_order_value)) +
geom_map(map = map_data("state"), color = "white", size = 0.1) +
scale_fill_gradient(low = "white", high = "red", name = "Avg. Order Value") +
labs(title = "Average Order Value by State") +
theme_void() +
theme(plot.title = element_text(hjust = 0.5, size = 16))
install.packages('mapdata')
library(ggplot2)
library(maps)
library(mapdata)
# Compute average order value by state
avg_order_value <- orders %>%
inner_join(order_payments, by = "order_id") %>%
inner_join(customers, by = "customer_id") %>%
group_by(customer_state) %>%
summarise(avg_order_value = mean(payment_value)) %>%
arrange(desc(avg_order_value))
#Query 5:  How many orders for each payment method were cancelled?
num_cancelled_orders1 <- orders  %>% left_join(order_payments, by="order_id") %>%left_join(order_items, by="order_id") %>% left_join(products, by="product_id")%>% inner_join(product_category_name_translation, by="product_category_name")%>% filter(order_status == "canceled")%>%group_by(product_category_name_english) %>% summarise(num_cancelled_orders = n())%>%arrange(desc(num_cancelled_orders))
library(readr)
library(tidyverse)
library(RSQLite)
#Query 5:  How many orders for each payment method were cancelled?
num_cancelled_orders1 <- orders  %>% left_join(order_payments, by="order_id") %>%left_join(order_items, by="order_id") %>% left_join(products, by="product_id")%>% inner_join(product_category_name_translation, by="product_category_name")%>% filter(order_status == "canceled")%>%group_by(product_category_name_english) %>% summarise(num_cancelled_orders = n())%>%arrange(desc(num_cancelled_orders))
num_cancelled_orders1
library(ggplot2)
library(maps)
library(mapdata)
# Compute average order value by state
avg_order_value <- orders %>%
inner_join(order_payments, by = "order_id") %>%
inner_join(customers, by = "customer_id") %>%
group_by(customer_state) %>%
summarise(avg_order_value = mean(payment_value)) %>%
arrange(desc(avg_order_value))
# Merge the average order value data with the map data
map_data <- map_data("state")
map_data <- merge(map_data, avg_order_value, by.x = "region", by.y = "customer_state")
# Create choropleth map
ggplot(map_data, aes(x = long, y = lat, group = group, fill = avg_order_value)) +
geom_polygon() +
scale_fill_gradient(low = "lightblue", high = "darkblue") +
labs(title = "Average Order Value by State", fill = "Average Order Value") +
theme_void() +
coord_map()
library(ggplot2)
library(maps)
library(mapdata)
# Compute average order value by state
avg_order_value <- orders %>%
inner_join(order_payments, by = "order_id") %>%
inner_join(customers, by = "customer_id") %>%
group_by(customer_state) %>%
summarise(avg_order_value = mean(payment_value)) %>%
arrange(desc(avg_order_value))
# Merge the average order value data with the map data
map_data <- map_data("state")
map_data <- merge(map_data, avg_order_value, by.x = "region", by.y = "customer_state")
# Create choropleth map
ggplot(map_data, aes(x = long, y = lat, group = group, fill = avg_order_value)) +
geom_polygon() +
scale_fill_gradient(low = "lightblue", high = "darkblue") +
labs(title = "Average Order Value by State", fill = "Average Order Value") +
theme_void() +
coord_map()
library(ggplot2)
library(maps)
library(mapdata)
# Compute average order value by state
avg_order_value <- orders %>%
inner_join(order_payments, by = "order_id") %>%
inner_join(customers, by = "customer_id") %>%
group_by(customer_state) %>%
summarise(avg_order_value = mean(payment_value)) %>%
arrange(desc(avg_order_value))
# Merge the average order value data with the map data
map_data <- map_data("state")
map_data <- merge(map_data, avg_order_value, by.x = "region", by.y = "customer_state")
# Create choropleth map
ggplot(map_data, aes(x = long, y = lat, group = group, fill = avg_order_value)) +
geom_polygon() +
scale_fill_gradient(low = "lightblue", high = "darkblue") +
labs(title = "Average Order Value by State", fill = "Average Order Value") +
theme_void() +
coord_map()
#Q2
ggplot(top_categories_by_revenue, aes(x = product_category_name, y = total_revenue)) +
geom_bar(stat = "identity", fill = "red") +
coord_flip() +
xlab("Product Category") +
ylab("Total Revenue (BRL)") +
ggtitle("Top 10 Product Categories by Revenue in 2018") + + facet_grid(am ~ .)
#Q2
ggplot(top_categories_by_revenue, aes(x = product_category_name, y = total_revenue)) +
geom_bar(stat = "identity", fill = "red") +
coord_flip() +
xlab("Product Category") +
ylab("Total Revenue (BRL)") +
ggtitle("Top 10 Product Categories by Revenue in 2018") +  facet_grid(am ~ .)
#Q2
ggplot(top_categories_by_revenue, aes(x = product_category_name, y = total_revenue)) +
geom_bar(stat = "identity", fill = "red") +
coord_flip() +
xlab("Product Category") +
ylab("Total Revenue (BRL)") +
ggtitle("Top 10 Product Categories by Revenue in 2018")
library(ggplot2)
# Plot the data
ggplot(top_categories_avg_review_score, aes(y = product_category_name, x = avg_review_score)) +
geom_bar(stat = "identity", fill = "#4C72B0") +
# Customize the appearance
theme_minimal() +
theme(axis.title.y = element_blank(),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(size = 12),
axis.title.x = element_text(size = 14),
plot.title = element_text(size = 16, hjust = 0.5)) +
labs(title = "Average Review Score by Product Category",
x = "Average Review Score")
library(ggplot2)
#Query1
# Plot the data
ggplot(top_categories_avg_review_score, aes(y = product_category_name, x = avg_review_score)) +
geom_bar(stat = "identity", fill = "#4C72B0") +
# Customize the appearance
theme_minimal() +
theme(axis.title.y = element_blank(),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(size = 12),
axis.title.x = element_text(size = 14),
plot.title = element_text(size = 16, hjust = 0.5)) +
labs(title = "Average Review Score by Product Category",
x = "Average Review Score")
library(ggplot2)
ggplot(top_categories_by_revenue, aes(x = total_revenue, y = reorder(product_category_name, -total_revenue))) +
geom_col(fill = "royalblue") +
labs(x = "Total Revenue", y = "Product Category", title = "Top Product Categories by Total Revenue in 2018") +
theme(plot.title = element_text(face = "bold", size = 14), axis.text.y = element_text(size = 10))
library(ggplot2)
ggplot(top_categories_by_revenue, aes(x = total_revenue, y = reorder(product_category_name, -total_revenue))) +
geom_col(fill = "#4C72B0") +
labs(x = "Total Revenue", y = "Product Category", title = "Top Product Categories by Total Revenue in 2018") +
theme(plot.title = element_text(face = "bold", size = 14), axis.text.y = element_text(size = 10))
library(ggplot2)
# run the query
num_customers_from_sellers1 <- orders %>%
inner_join(order_items, by = "order_id") %>%
inner_join(customers, by = "customer_id") %>%
group_by(seller_id) %>%
summarise(num_customers = n_distinct(paste(customer_id, seller_id)),
mode_customer_location = names(which.max(table(customer_state)))) %>%
filter(num_customers > 0)
# create the scatter plot
ggplot(num_customers_from_sellers1, aes(x = num_customers, y = mode_customer_location)) +
geom_point() +
labs(x = "Number of Customers",
y = "Seller Location",
title = "Number of Customers Who Purchased from the Same Seller")
num_customers_from_sellers1
# Load necessary libraries
library(tidyverse)
library(maps)
library(ggplot2)
# Download map data for Brazilian states
states_map <- map_data("state", region = "brazil")
# Download map data for Brazilian states
states_map <- map_data("state", region = "brazil")
# Plot choropleth map with average order value by state
ggplot() +
# Add states polygons
geom_polygon(data = states_map, aes(x = long, y = lat, group = group), fill = "white", color = "black") +
# Add choropleth fill with average order value
geom_map(data = avg_order_value, map = states_map, aes(fill = avg_order_value, map_id = region), color = "black") +
# Add color scale and labels
scale_fill_gradient(low = "white", high = "blue", name = "Average Order Value") +
labs(title = "Average Order Value by Brazilian State") +
coord_map("albers", lat0 = 0, lat1 = -20) + # Center map on Brazil
theme_void()
# Download map data for Brazilian states
states_map <- map_data("state", region = "brazil")
library(rnaturalearth)
install.packages('rnaturalearth')
library(rnaturalearth)
library(ggplot2)
# get Brazil map
brazil <- ne_countries(country = "brazil", returnclass = "sf")
# plot map with average order values
ggplot(avg_order_value, aes(fill = avg_order_value)) +
geom_sf(data = brazil) +
geom_sf_text(aes(label = customer_state), size = 3) +
scale_fill_gradient(low = "white", high = "steelblue") +
labs(title = "Average Order Value by Brazilian State") +
theme_void()
# plot map with average order values
ggplot(avg_order_value, aes(fill = avg_order_value)) +
geom_sf(data = brazil) +
geom_sf_text(aes(label = customer_state), size = 3) +
scale_fill_gradient(low = "white", high = "steelblue") +
labs(title = "Average Order Value by Brazilian State") +
theme_void()
library(rnaturalearth)
library(ggplot2)
# get Brazil map
brazil <- ne_countries(country = "brazil", returnclass = "sf")
# plot map with average order values
ggplot(avg_order_value, aes(fill = avg_order_value)) +
geom_sf(data = brazil) +
geom_sf_text(aes(label = customer_state), size = 3) +
scale_fill_gradient(low = "white", high = "steelblue") +
labs(title = "Average Order Value by Brazilian State") +
theme_void()
# Load necessary libraries
library(tidyverse)
library(maps)
library(ggplot2)
# Download map data for Brazilian states
states_map <- map_data("state", region = "brazil")
library(rnaturalearth)
library(ggplot2)
# get Brazil map
brazil <- ne_countries(country = "brazil", returnclass = "sf")
# plot map with average order values
ggplot(avg_order_value, aes(fill = avg_order_value)) +
geom_sf(data = brazil) +
geom_sf_text(aes(label = customer_state), size = 3) +
scale_fill_gradient(low = "white", high = "steelblue") +
labs(title = "Average Order Value by Brazilian State") +
theme_void()
knitr::opts_chunk$set(echo = TRUE)
# load required libraries
library(dplyr)
library(tidyr)
library(stringr)
library(purrr)
library(readxl) # to read excel file
library(caret)  # to calculate accuracy, confusion matrix
library(ggplot2) # for creating plots
library(hrbrthemes) # for creating themes
# Create an empty data frame to store the results
results_df <- data.frame(SheetName = character(),
Accuracy = numeric(),
Type1ErrorRate = numeric(),
Type2ErrorRate = numeric(),
stringsAsFactors = FALSE)
# Read the data into a data frame
df <- read_excel("Experiment4_March 16, 2023_10.51.xlsx", sheet ="baseline")
